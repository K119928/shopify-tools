// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum ImageSource {
  Manual
  Auto
}

enum ImageSyncStatus {
  Synced
  NotSync
}

model Image {
  id          String          @id @default(cuid())
  name        String
  source      ImageSource
  sourceLink  String?         @map(name: "source_link")
  cloudLink   String          @map(name: "cloud_link")
  backupLink  String?         @map(name: "backup_link")
  provider    String?
  providerRef String?         @map(name: "provider_ref")
  syncStatus  ImageSyncStatus @default(NotSync) @map(name: "sync_status")
  product     Product?        @relation(fields: [productId], references: [id])
  productId   String?         @map(name: "product_id")
  createdAt   DateTime        @default(now()) @map(name: "created_at")
  updatedAt   DateTime        @updatedAt @map(name: "updated_at")

  @@map(name: "images")
}

model Product {
  id              String  @id @default(cuid())
  name            String?
  price           Float?
  description     String?
  descriptionHtml String? @map(name: "description_html")
  category        String?

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  images      Image[]
  collections ProductsOnCollections[]

  @@map(name: "products")
}

model Collection {
  id   String @id @default(cuid())
  name String @unique

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  products ProductsOnCollections[]
  shops    CollectionsOnShops[]

  @@map(name: "collections")
}

model ProductsOnCollections {
  product      Product    @relation(fields: [productId], references: [id])
  productId    String     @map(name: "product_id")
  collection   Collection @relation(fields: [collectionId], references: [id])
  collectionId String     @map(name: "collection_id")
  priority     Int?
  assignedAt   DateTime   @default(now()) @map(name: "assigned_at")

  @@id([productId, collectionId])
  @@map(name: "products_on_collections")
}

enum ShopSyncStatus {
  PushedAll
  Scheduled
  NotPublished
}

model Shop {
  id         String         @id @default(cuid())
  name       String         @unique
  syncStatus ShopSyncStatus @default(NotPublished) @map(name: "sync_status")
  apiKey     String?        @map(name: "api_key")
  provider   String         @default("self")
  shopDomain String         @default("") @map("shop_domain")

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  maskImages  ShopMaskImage[]
  collections CollectionsOnShops[]

  @@map(name: "shops")
}

model CollectionsOnShops {
  shop             Shop       @relation(fields: [shopId], references: [id])
  shopId           String     @map(name: "shop_id")
  collection       Collection @relation(fields: [collectionId], references: [id])
  collectionId     String     @map(name: "collection_id")
  priority         Int?
  noPushedProducts Int        @default(0)
  assignedAt       DateTime   @default(now()) @map(name: "assigned_at")

  @@id([shopId, collectionId])
  @@map(name: "collections_on_shops")
}

model ShopMaskImage {
  id        String   @id @default(cuid())
  src       String
  positionX Int      @map(name: "position_x")
  positionY Int      @map(name: "position_y")
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  shop   Shop?   @relation(fields: [shopId], references: [id])
  shopId String? @map(name: "shop_id")

  @@map(name: "shop_mask_images")
}
